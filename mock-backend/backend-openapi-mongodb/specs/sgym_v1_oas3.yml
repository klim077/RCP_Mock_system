openapi: "3.0.2"

info:
  version: 0.2.0
  title: SGym API
  contact:
    name: Tan Chin Hiong

servers:
  - url: /v0.1

tags:
  - name: Users
    description: Everything about Users
  - name: Machines
    description: Everything about Machines
  - name: Exercises
    description: Everything about Exercises
  - name: Access
    description: Everything about Access, like registration, login, logout

paths:
  /health:
    get:
      tags:
        - System
      summary: Server health check
      description: Check if server is healthy
      operationId: routes.system.get_health
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /machines:
    get:
      tags:
        - Machines
      summary: Get list of machines
      description: Get a list of machines
      operationId: routes.machines.get_machines
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineIdList"
        401:
          description: Authorization error
          content: {}
      # security:
      #   - ApiKeyAuth: []
  /machines/location:
    get:
      tags:
        - Machines
      summary: Get list of locations
      description: Get a list of location
      operationId: routes.machines.get_location
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineIdList"
        401:
          description: Authorization error
          content: {}
      # security:
      #   - ApiKeyAuth: []
  /machines/location/{location}:
    get:
      tags:
        - Machines
      summary: Get list of machines by location
      description: Get a list of machines by location
      operationId: routes.machines.get_machines_by_location
      parameters:
        - name: location
          in: path
          description: Location
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineIdList"
        401:
          description: Authorization error
          content: {}
      # security:
      #   - ApiKeyAuth: []

  /machines/{machine_id}:
    get:
      tags:
        - Machines
      summary: Get machine information/metadata by uuid
      description: Get machine information/metadata by uuid
      operationId: routes.machines.get_machine_info_by_id
      parameters:
        - name: machine_id
          in: path
          description: Machine UUID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content: {}
        401:
          description: Authorization error
          content: {}
      # security:
      #   - ApiKeyAuth: []

  /machines/{machineId}/dispatch:
    post:
      tags:
        - Machines
      summary: Dispatch machine data
      description: Dispatch a machine's data to the backend services
      operationId: routes.machines.dispatch
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        202:
          description: Request accepted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - ApiKeyAuth: []
      #   - jwt: []
  /machines/{machineId}/keyvalues:
    get:
      tags:
        - Machines
      summary: Get machine key-value pairs
      description: Get selected key-value pairs for a machine
      operationId: routes.machines.get_keyvalues
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyValues"
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - ApiKeyAuth: []
      #   - jwt: []

  /machines/{machineId}/keyvalues/{key}:
    delete:
      tags:
        - Machines
      summary: Delete machine key
      description: Delete a machine key
      operationId: routes.machines.del_key
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: key
          in: path
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            default: user
            enum:
              - user
              - data_stream
      responses:
        201:
          description: Deleted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - ApiKeyAuth: []
      #   - jwt: []
    post:
      tags:
        - Machines
      summary: Set machine key
      description: Set a machine key
      operationId: routes.machines.set_key
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: key
          in: path
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            default: reps
            enum:
              - reps
              - weight
              - available
              - user
              - avgCadence
              - avgSpeed
              - cadence
              - power
              - speed
              - distance
              - calories
              - rec
              - strokes
              - timestamp
              - pace
              - workoutTime
              - rowingTime
              - heartRate
              - interval
              - isEdge
      requestBody:
        description: Value to set
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  oneOf:
                    - $ref: "#/components/schemas/DefaultString"
                    - type: number
              required:
                - value
              example:
                value: 0
        required: true
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - ApiKeyAuth: []
      #   - jwt: []

  /machines/{machineId}/keyvalues/{key}/increment:
    post:
      tags:
        - Machines
      summary: Increment machine key
      description: Increment a machine key by 1 if request body is not specified, otherwise by the value specified in request body.
      operationId: routes.machines.increment_key
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: key
          in: path
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            default: reps
            enum:
              - reps
              - calories
              - distance
      requestBody:
        description: Value to increment
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: number
              required:
                - value
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - ApiKeyAuth: []

  /machines/{machineId}/keyvalues/{key}/xadd:
    post:
      tags:
        - Machines
      summary: Add data to machine data_stream
      description: Add a json data to data_stream key.
      operationId: routes.machines.xadd
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: key
          in: path
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            default: data_stream
            enum:
              - data_stream
      requestBody:
        description: JSON to add
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - ApiKeyAuth: []

  /machines/{machineId}/initializeRowerWithUser:
    post:
      tags:
        - Machines
      summary: Initialize rower machine with user
      description: Set user, distance, cadence, calories, strokes, timestamp, workoutTime, pace, power and removes previous data stream.
      operationId: routes.machines.initialize_rower_with_user
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: User Id
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - value
              example:
                value: "123456"
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - ApiKeyAuth: []
      #   - jwt: []

  /machines/{machineId}/rowerUpdateRedis:
      post:
        tags:
          - Machines
        summary: Update distance, cadence, calories, strokes, timestamp, workoutTime, pace, power, and data_stream in updateRedis method in update_redis_3.py
        description: Set distance, cadence, calories, strokes, timestamp, workoutTime, pace, power, and data_stream.
        operationId: routes.machines.rowerUpdateRedis
        parameters:
          - name: machineId
            in: path
            description: Machine Id
            required: true
            schema:
              $ref: "#/components/schemas/DefaultString"
        requestBody:
          description: JSON values for the following {calories, weight, d_diff}
          content:
            application/json:
              schema:
                type: object
                properties:
                  distance:
                    type: number
                    format: float
                  cadence:
                    type: number
                    format: float
                  calories:
                    type: number
                    format: float
                  strokes:
                    type: number
                    format: float
                  timestamp:
                    type: number
                    format: float
                  workoutTime:
                    type: number
                    format: float
                  pace:
                    type: number
                    format: float
                  power:
                    type: number
                    format: float
                  heartRate:
                    type: number
                    format: float
                  rowingTime:
                    type: number
                    format: float
                  interval:
                    type: number
                    format: float
                  isEdge:
                    type: number
                    format: float
                  rec:
                    $ref: "#/components/schemas/DefaultString"
                required:
                  - distance
                  - cadence
                  - calories
                  - strokes
                  - timestamp
                  - workoutTime
                  - pace
                  - power
                  - rec
                  - heartRate
                  - interval
                  - rowingTime
                  - isEdge
                example:
                  distance: 1.0
                  cadence: 2.0
                  calories: 3.0
                  strokes: 4.0
                  timestamp: 5.0
                  workoutTime: 6.0
                  pace: 7.0
                  power: 8.0
                  rec: "false"
                  heartRate: 9.0
                  rowingTime: 10.0
                  interval: 11.0
                  isEdge: 0
        responses:
          201:
            description: Updated Redis with user exercise information
            content: {}
          400:
            description: Bad request
            content: {}
          401:
            description: Authorization error
            content: {}
          500:
            description: Unexpected error
            content: {}
        # security:
        #   - ApiKeyAuth: []
        #   - jwt: []
  /machines/{machineId}/rowerUpdateRedisFromPostman:
    post:
      tags:
        - Machines
      summary: Update distance, workoutTime, calories, strokes, power, cadence, pace and data_stream in updateRedis method in update_redis_3.py
      description: Set distance, workoutTime, calories, strokes, power, cadence, pace and data_stream.
      operationId: routes.machines.rowerUpdateRedisFromPostman
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {calories, weight, d_diff}
        content:
          application/json:
            schema:
              type: object
              properties:
                  distance:
                    type: number
                    format: float
                  cadence:
                    type: number
                    format: float
                  calories:
                    type: number
                    format: float
                  strokes:
                    type: number
                    format: float
                  timestamp:
                    type: number
                    format: float
                  workoutTime:
                    type: number
                    format: float
                  pace:
                    type: number
                    format: float
                  power:
                    type: number
                    format: float
                  heartRate:
                    type: number
                    format: float
                  rowingTime:
                    type: number
                    format: float
                  interval:
                    type: number
                    format: float
                  isEdge:
                    type: number
                    format: float
                  rec:
                    $ref: "#/components/schemas/DefaultString"
              required:
                - distance
                - cadence
                - calories
                - strokes
                - timestamp
                - workoutTime
                - pace
                - power
                - rec
                - heartRate
                - interval
                - rowingTime
                - isEdge
      responses:
        201:
          description: Postman updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - ApiKeyAuth: []
      #   - jwt: []

  /exercises:
    post:
      tags:
        - Exercises
      summary: Post exercise
      description: Post exercise to database
      operationId: routes.exercises.exercises.post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseDetail"
      responses:
        201:
          description: Exercise created
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
      # security:
      #   - ApiKeyAuth: []

components:
  schemas:
    ActiveSgId:
      type: object
      properties:
        activesg_id:
          type: string
          pattern: "^[0-9]+$"
    ActiveSgIdToken:
      type: object
      properties:
        activesg_id_token:
          type: string
          pattern: "^[a-f0-9]{32}$"
    UserDisplayName:
      type: string
      pattern: "^[a-zA-Z0-9 ]{0,30}$"
    PasswordString:
      type: string
      pattern: '^[^<>\/\]\\{[} ]+$'
    DefaultString:
      type: string
      pattern: "^[a-zA-Z0-9._:@$ -]{0,256}$"
    Location:
      description: List of location names to be used (Edit this if there are new locations being supported)
      type: string
      enum:
        - ActiveSG@HBB
        - ActiveSG@JE
        - ActiveSG@OTH
        - 10MBCLevel9
        - X_10MBCLevel9
    Health:
      description: Response to health check
      type: object
      properties:
        ok:
          description: Is server healthy?
          type: boolean
      example:
        ok: true
    KeyValues:
      description: Key value pairs of a machine
      type: object
      properties:
        w0:
          description: Weight of first weight stack in lbs
          type: integer
          minimum: 0
          maximum: 100
        wa:
          description: Add on weights on weight stack in lbs
          type: integer
          minimum: 0
          maximum: 100
        wn:
          description: Weight of subsequent weight stack in lbs
          type: integer
          minimum: 0
          maximum: 100
        user:
          $ref: "#/components/schemas/DefaultString"
        weight:
          description: Weight lifted in kg
          type: number
          minimum: 0
          maximum: 200
        available:
          type: boolean
        name:
          $ref: "#/components/schemas/DefaultString"
        location:
          $ref: "#/components/schemas/DefaultString"
        reps:
          type: integer
        type:
          $ref: "#/components/schemas/DefaultString"
    MachineIdList:
      description: A list of machine id
      type: array
      items:
        $ref: "#/components/schemas/MachineId"
    MachineId:
      description: A machine id
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/DefaultString"
        type:
          $ref: "#/components/schemas/DefaultString"
        exercise_name:
          $ref: "#/components/schemas/DefaultString"
        exercise_group:
          $ref: "#/components/schemas/DefaultString"
    MachineAvailabilityList:
      description: A list of machine availability status
      type: array
      items:
        $ref: "#/components/schemas/MachineAvailability"
    MachineAvailability:
      description: A machine's availability status
      type: object
      properties:
        machineId:
          $ref: "#/components/schemas/DefaultString"
        availability:
          type: boolean
        location:
          $ref: "#/components/schemas/DefaultString"
        type:
          $ref: "#/components/schemas/DefaultString"
        muscleType:
          $ref: "#/components/schemas/DefaultString"
    ExerciseInfo:
      description: Basic information about exercise
      type: object
      required:
        - exercise_machine_id
      properties:
        exercise_name:
          $ref: "#/components/schemas/DefaultString"
        exercise_location:
          $ref: "#/components/schemas/DefaultString"
        exercise_id:
          $ref: "#/components/schemas/DefaultString"
        exercise_started:
          $ref: "#/components/schemas/DateTime"
        exercise_ended:
          $ref: "#/components/schemas/DateTime"
        exercise_type:
          $ref: "#/components/schemas/DefaultString"
        exercise_machine_id:
          $ref: "#/components/schemas/DefaultString"
    ExerciseSummary:
      allOf:
        - $ref: "#/components/schemas/UserInfo"
        - $ref: "#/components/schemas/ExerciseInfo"
        - description: One exercise, containing general data such as time, location and exercise summary.
          type: object
          properties:
            exercise_summary:
              type: object

    ExerciseSummaries:
      description: A object containing a list of exercise summaries, usually from `GET`.
      type: array
      items:
        $ref: "#/components/schemas/ExerciseSummary"
    ExerciseDetail:
      allOf:
        - $ref: "#/components/schemas/ExerciseSummary"
        - description: One exercise, containing general data such as time and location, with exercise specific data stored in `exercise_data` field.
          type: object
          required:
            - exercise_data
          properties:
            exercise_data:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/Rower"
    DateTime:
      description: Milliseconds since epoch
      type: integer
      format: int64
    Rower:
      description: Specific exercise data for Rower.
      type: object
      required:
        - distance
        - cadence
        - calories
        - strokes
        - timestamp
        - workoutTime
        - pace
        - power
      properties:
        distance:
          type: number
        cadence:
          type: number
        calories:
          type: number
        strokes:
          type: number
        timestamp:
          type: number
        workoutTime:
          type: number
        pace:
          type: number
        power:
          type: number
        heartRate: 
          type: number
        rowingTime:
          type: number
        interval:
          type: number
    Gender:
      description: Gender
      $ref: "#/components/schemas/DefaultString"
      default: Female
      enum:
        - Female
        - Male
    RegistrationInfo:
      description: User information for registration.
      type: object
      required:
        - username
        - password
        - gender
        - phonenumber
        - displayname
      properties:
        username:
          $ref: "#/components/schemas/DefaultString"
        password:
          $ref: "#/components/schemas/PasswordString"
        gender:
          $ref: "#/components/schemas/Gender"
        phonenumber:
          $ref: "#/components/schemas/DefaultString"
        displayname:
          $ref: "#/components/schemas/UserDisplayName"
    TimeStamp:
      description: timestamp
      type: object
      required:
        - timestamp
      properties:
        timestamp:
          $ref: "#/components/schemas/DefaultString"
    RegistrationActiveSgQRInfo:
      description: User information for registration.
      type: object
      required:
        - activeSgId
        - phoneNo
        - location
        - device
        - machineUUID
      properties:
        activeSgId:
          $ref: "#/components/schemas/DefaultString"
        phoneNo:
          $ref: "#/components/schemas/DefaultString"
        location:
          $ref: "#/components/schemas/DefaultString"
        device:
          $ref: "#/components/schemas/DefaultString"
        machineUUID:
          $ref: "#/components/schemas/DefaultString"
    UserInfo:
      description: User information
      type: object
      required:
        - user_id
      properties:
        user_id:
          $ref: "#/components/schemas/DefaultString"
        user_display_name:
          $ref: "#/components/schemas/UserDisplayName"
        user_gender:
          $ref: "#/components/schemas/Gender"
        user_registered:
          $ref: "#/components/schemas/DateTime"
        user_phone_no:
          $ref: "#/components/schemas/DefaultString"
    UserDeletionInfo:
      description: User deletion information
      type: object
      properties:
        user_delete_count:
          type: integer
        exercises_delete_count:
          type: integer
    Exercises:
      description: A list of exercises, usually from `GET`.
      type: array
      items:
        $ref: "#/components/schemas/Exercise"
    Exercise:
      description: One exercise, containing general data such as time and location, with exercise specific data stored in `exercise_data` field.
      type: object
      required:
        - user_nickname
      properties:
        user_nickname:
          $ref: "#/components/schemas/DefaultString"
        user_gender:
          $ref: "#/components/schemas/DefaultString"
        exercise_started:
          $ref: "#/components/schemas/DateTime"
        location:
          $ref: "#/components/schemas/DefaultString"
        exercise_type:
          $ref: "#/components/schemas/DefaultString"
        exercise_summary:
          type: object
        exercise_data:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Rower"
        calories:
          type: number
        last_modified:
          $ref: "#/components/schemas/DateTime"
      example:
        user_nickname: Test Dummy
        user_gender: Female
        location: 10MBCLevel9
        exercise_type: weightstack
        exercise_started: 1564102309634
        exercise_summary:
          reps: 2
          weight: 50
        exercise_data:
          - weight: 50
            distance: 295.0
            calories: 3.5
          - weight: 50
            distance: 280.0
            calories: 3.2
        calories: 6.7
    PhoneNumber:
      description: Phone number
      $ref: "#/components/schemas/DefaultString"
      example: "+6598765432"

