openapi: "3.0.2"

info:
  version: 0.2.0
  title: SGym API
  contact:
    name: Tan Chin Hiong

servers:
  - url: /v0.1

tags:
  - name: Users
    description: Everything about Users
  - name: Feedback
    description: Everything about Feedback
  - name: Cumulative Challenges
    description: Everything about Cumulative Challenges
  - name: Campaigns
    description: Everything about Campaigns
  - name: Rewards
    description: Everything about Rewards
  - name: Machines
    description: Everything about Machines
  - name: Exercises
    description: Everything about Exercises
  - name: Access
    description: Everything about Access, like registration, login, logout
  - name: Data Services
    description: Everything about data
  - name: System
    description: System related information
  - name: Wearable
    description: Everything about Wearable, like device details and wearable data
  - name: Insights
    description: Everything about Insights
  - name: Active Health Trail
    description: Everything about Active Health Trail

paths:
  /health:
    get:
      tags:
        - System
      summary: Server health check
      description: Check if server is healthy
      operationId: routes.system.get_health
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /leaderboard/user:
    get:
      tags:
        - Data Services
      summary: Calculates a metric for a user across a list of gyms and arbitrary date range.
      operationId: routes.dataservices.get_user_metrics_by_dates_gyms
      parameters:
        - name: user_id
          in: query
          description: User to calculate metrics for.
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: start_date
          in: query
          description: |
            Start Date. <br> 
            Defaults to "2020-01-01" if not specified. <br>
            Format YYYY-mm-dd.
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: end_date
          in: query
          description: |
            End Date. <br>
            Defaults to today's date if not specified. <br>
            Format YYYY-mm-dd.
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: gyms
          in: query
          description: |
            List of gyms. <br>
            Defaults to all gyms if not specified. <br>
            Gyms supported are X_10MBCLevel9, 10MBCLevel9, ActiveSG@HBB, ActiveSG@JE and ActiveSG@OTH.
          schema:
            default:
              ["10MBCLevel9", "ActiveSG@HBB", "ActiveSG@JE", "ActiveSG@OTH"]
            type: array
            items:
              $ref: "#/components/schemas/Location"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserMetrics"
        400:
          description: Retrieval Error
          content: {}
        401:
          description: Authorization Error
          content: {}
      security:
        - jwt: []
        - ApiKeyAuth: []

  /leaderboard/dispatch:
    post:
      tags:
        - Data Services
      summary: Triggers computation of user's monthly leaderboard metrics.
      description: Posts a dictionary containing user_id and location to the leaderboard-computation channel.
      operationId: routes.dataservices.post_leaderboard_computation
      requestBody:
        description: Requires user_id and location.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: "#/components/schemas/DefaultString"
                location:
                  type: array
                  items:
                    $ref: "#/components/schemas/Location"
                user_info_update:
                  type: boolean
              required:
                - user_id
                - location
      responses:
        201:
          description: Calculation task dispatched.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /leaderboard/recompute:
    post:
      tags:
        - Data Services
      summary: Triggers recomputation of leaderboard metrics.
      description: post a recompute to the leaderboard-computation channel.
      operationId: routes.dataservices.recalculate_leaderboard_metrics

      responses:
        201:
          description: Calculation task dispatched.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /leaderboard/ban_user:
    post:
      tags:
        - Data Services
      summary: Ban users.
      description: add the user into a blacklist which will be clear every month.
      operationId: routes.dataservices.ban_leaderboard_user
      requestBody:
        description: Requires user_id.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - user_id
      responses:
        201:
          description: Successfully Ban User.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /leaderboard/ban_user/mongo/{location}:
    get:
      tags:
        - Data Services
      summary: Fetches banned users from mongodb
      operationId: routes.dataservices.fetch_banned_leaderboard_users_mongo
      parameters:
        - name: location
          in: path
          description: Filter by location
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successfully Retrieved User.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /leaderboard/ban_user/mongo:
    post:
      tags:
        - Data Services
      summary: Ban users and store info in MongoDB
      description: Add the ban user into a collection in mongodb
      operationId: routes.dataservices.ban_leaderboard_user_mongo
      requestBody:
        description: Requires user_id and gym location
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: "#/components/schemas/DefaultString"
                location:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - user_id
                - location
      responses:
        201:
          description: Successfully Ban User.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /leaderboard/unban_user/mongo:
    post:
      tags:
        - Data Services
      summary: unban users and remove their info in MongoDB
      description: Remove the unban user from the collection in mongodb
      operationId: routes.dataservices.unban_leaderboard_user_mongo
      requestBody:
        description: Requires user_id.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - user_id
      responses:
        201:
          description: Successfully unban User.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /leaderboard/reset_username:
    post:
      tags:
        - Data Services
      summary: Ban users.
      description: add the user into a blacklist which will be clear every month.
      operationId: routes.dataservices.reset_leaderboard_username
      requestBody:
        description: Requires user_id.
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - user_id
      responses:
        201:
          description: Successfully reset User.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /leaderboard/v2:
    get:
      tags:
        - Data Services
      summary: Gets a Leaderboard for a specific metric across a list of gyms and arbitrary date range.
      description: Defaults to a Leaderboard across all gyms and all time.
      operationId: routes.dataservices.get_leaderboard_by_dates_gyms
      parameters:
        - name: limit
          in: query
          description: |
            Limit number of responses  
            *Minimum: 1*  
            *Maximum: 10000*
          schema:
            type: integer
            minimum: 1
            maximum: 10000
            default: 10
        - name: metric
          in: query
          description: Metric to obtain a leaderboard for.
          required: true
          schema:
            $ref: "#/components/schemas/LeaderboardMetrics"
        - name: start_date
          in: query
          description: |
            Start Date. <br> 
            Defaults to "2020-01-01" if not specified. <br>
            Format YYYY-mm-dd.
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: end_date
          in: query
          description: |
            End Date. <br>
            Defaults to today's date if not specified. <br>
            Format YYYY-mm-dd.
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: gyms
          in: query
          description: |
            List of gyms. <br>
            Defaults to all gyms if not specified. <br>
            Gyms supported are X_10MBCLevel9, 10MBCLevel9, ActiveSG@HBB, ActiveSG@JE and ActiveSG@OTH.
          schema:
            default:
              ["10MBCLevel9", "ActiveSG@HBB", "ActiveSG@JE", "ActiveSG@OTH"]
            type: array
            items:
              $ref: "#/components/schemas/Location"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NameScore"
        400:
          description: Retrieval Error
          content: {}
        401:
          description: Authorization Error
          content: {}
      security:
        - jwt: []
        - ApiKeyAuth: []

  /leaderboard:
    get:
      tags:
        - Data Services
      summary: Gets this month's intra-gym Leaderboard for a specific metric.
      description: Metrics supported are distance-run, gym-attendance, weight-lifted, cardio-minutes, calories-burnt and active-minutes.
      operationId: routes.dataservices.get_monthly_leaderboard
      parameters:
        - name: limit
          in: query
          description: |
            Limit number of responses  
            *Minimum: 1*  
            *Maximum: 9999*
          schema:
            type: integer
            minimum: 1
            maximum: 9999
            default: 21
        - name: location
          in: query
          description: Location
          required: true
          schema:
            $ref: "#/components/schemas/Location"
        - name: metric
          in: query
          description: Leaderboard Metric
          required: true
          schema:
            type: string
        - name: age_lower
          in: query
          description: Lower limit of age
          required: false
          schema:
            type: string
        - name: age_upper
          in: query
          description: Upper limit of age
          required: false
          schema:
            type: string
        - name: gender
          in: query
          description: Gender of users
          required: false
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: desc
          in: query
          description: Result arrange, default by desc order of scores
          required: false
          schema:
            type: boolean

      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LeaderList"
        400:
          description: Retrieval error
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - jwt: []
        - ApiKeyAuth: []

  /leaderboard_metrics:
    get:
      tags:
        - Data Services
      summary: Gets this month's intra-gym Leaderboard for a specific metric.
      description: Metrics supported are distance-run, gym-attendance, weight-lifted, cardio-minutes, calories-burnt and active-minutes.
      operationId: routes.dataservices.leaderboard_metrics
      parameters:
        - name: location
          in: query
          description: Location
          required: true
          schema:
            $ref: "#/components/schemas/Location"
        - name: active
          in: query
          description: active leaderboard [true or false]
          required: true
          schema:
            type: boolean
        - name: recurring
          in: query
          description: recurring leaderboard [true or false]
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: Successful
          content: {}
        400:
          description: Retrieval error
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - jwt: []
        - ApiKeyAuth: []
    post:
      tags:
        - Data Services
      summary: Create new Leaderboard Metrics
      description: Create a new Leaderboard Metric to be displayed on the leaderboard
      operationId: routes.dataservices.post_leaderboard_metrics
      requestBody:
        description: Information on the leaderboard
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Leaderboard Metrics created
          content: {}
        400:
          description: Error in creating Leaderboard Metrics error
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - jwt: []
    put:
      tags:
        - Data Services
      summary: Updates leaderboard/campaign metrics
      description: Updates the leaderboard
      operationId: routes.dataservices.put_leaderboard_metrics
      requestBody:
        description: Updated information on the leaderboard
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Leaderboard Metrics Updated
          content: {}
        400:
          description: Error in Updating Leaderboard Metrics error
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - jwt: []
    delete:
      tags:
        - Data Services
      summary: Deletes leaderboard/campaign metrics
      description: Deletes a specified leaderboard
      operationId: routes.dataservices.delete_leaderboard_metrics
      parameters:
        - name: campaignId
          in: query
          description: Campaign's id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Leaderboard Metrics deleted
          content: {}
        400:
          description: Error in deleting Leaderboard Metrics error
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - jwt: []

  /serviceaccounts:
    post:
      tags:
        - Access
      summary: Create new service account
      description: Create a new service account, requires api key for an sgym admin user
      operationId: routes.access.create_service_account
      requestBody:
        description: List of machine id and availability
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceAccountCreate"
        required: true
      responses:
        201:
          description: Service account created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceToken"
        400:
          description: Account deletion error
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /serviceaccounts/{accountName}:
    delete:
      tags:
        - Access
      summary: Delete service account
      description: Delete service account, requires api key for an sgym admin user
      operationId: routes.access.delete_service_account
      parameters:
        - name: accountName
          in: path
          description: Service account name
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        201:
          description: Service account deleted
          content: {}
        400:
          description: Account creation error
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /weighingScales/{machineId}/keyvalues:
    get:
      tags:
        - Machines
      summary: Get machine key-value pairs
      description: Get selected key-value pairs for a machine
      operationId: routes.weighingScale.weighingscale.get_keyvalues
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyValues"
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /weighingScales/{machineId}/initializeWeighingScaleWithUser:
    post:
      tags:
        - Machines
      summary: Initialize weighing scale machine with user
      description: Set user and clear weighing scale related fields
      operationId: routes.weighingScale.weighingscale.initialize_weighing_scale_with_user
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: User Id
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - value
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /weighingScales/{machineId}/WeighingScaleUpdateRedis:
    post:
      tags:
        - Machines
      summary: Update redis for weighing scale from the controller
      description: Set redis for weighing scale from the controller.
      operationId: routes.weighingScale.weighingscale.weighingScaleUpdateRedis
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {isStable,weight,unit,hasImpedance,hasLoad,impedance,isConnected,timestamp}
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - isStable
                - weight
                - unit
                - hasImpedance
                - hasLoad
                - impedance
                - isConnected
                - timestamp
      responses:
        201:
          description: Updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /weighingScales/{userId}/{limit}/getBodyMetricsList:
    get:
      tags:
        - Users
      summary: Get a list of BodyMetrics data points
      description: Get a list of BodyMetrics data points
      operationId: routes.weighingScale.weighingscale.getBodyMetricsList
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: limit
          in: path
          description: limit
          required: true
          schema:
            type: integer
            default: 0
        - name: location
          in: query
          description: Location
          required: false
          schema:
            $ref: "#/components/schemas/Location"
        - name: start_date
          in: query
          description: Start date of query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
        - name: end_date
          in: query
          description: End date of query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BodyMetricsList"
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /weighingScales/{machineId}/weighingScaleUpdateRedisFromPostman:
    post:
      tags:
        - Machines
      summary: Update redis for weighing scale from the postman
      description: Set redis for calculation in weighing scale from the postman.
      operationId: routes.weighingScale.weighingscale.weighingScaleUpdateRedisFromPostman
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {bmi,bodyfatPercentage,musclePercentage,bodyType,waterPercentage,protein,fatMassToIdeal,metabolicAge,basalMetalbolism,boneMass,BMR,LBMCoefficient,visceralFat,idealWeight}
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - bmi
                - bodyFatPercentage
                - musclePercentage
                - waterPercentage
                - protein
                - basalMetalbolism
                - LBMCoefficient
                - BMR
                - visceralFat
                - boneMass
                - idealWeight
                - fatMassToIdeal
                - bodyType
                - metabolicAge
                - height
      responses:
        201:
          description: Updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /bpm/{machineId}/keyvalues:
    get:
      tags:
        - Machines
      summary: Get machine key-value pairs
      description: Get selected key-value pairs for a machines
      operationId: routes.bpm.bpm.get_keyvalues
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyValues"
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /bpm/{machineId}/initializeBpmWithUser:
    post:
      tags:
        - Machines
      summary: Initialize blood pressure monitor with user
      description: Set user and clear bpm related fields
      operationId: routes.bpm.bpm.initialize_bpm_with_user
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: User Id
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - value
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /bpm/{machineId}/bpmUpdateRedis:
    post:
      tags:
        - Machines
      summary: Update redis for bpm from the controller
      description: Set redis for bpm from the controller.
      operationId: routes.bpm.bpm.bpmUpdateRedis
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {systolic,diastolic,arterial,pulse}
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - systolic
                - diastolic
                - arterial
                - pulse
      responses:
        201:
          description: Updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /bpm/{userId}/{limit}/getBpMetricsList:
    get:
      tags:
        - Users
      summary: Get a list of BodyMetrics data points
      description: Get a list of BodyMetrics data points
      operationId: routes.bpm.bpm.getBpMetricsList
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: limit
          in: path
          description: limit
          required: true
          schema:
            type: integer
            default: 0
        - name: location
          in: query
          description: Location
          required: false
          schema:
            $ref: "#/components/schemas/Location"
        - name: start_date
          in: query
          description: Start date of query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
        - name: end_date
          in: query
          description: End date of query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BpMetricsList"
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines:
    get:
      tags:
        - Machines
      summary: Get list of machines
      description: Get a list of machines
      operationId: routes.machines.get_machines
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineIdList"
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
  /machines/location:
    get:
      tags:
        - Machines
      summary: Get list of locations
      description: Get a list of location
      operationId: routes.machines.get_location
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineIdList"
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
  /machines/location/{location}:
    get:
      tags:
        - Machines
      summary: Get list of machines by location
      description: Get a list of machines by location
      operationId: routes.machines.get_machines_by_location
      parameters:
        - name: location
          in: path
          description: Location
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineIdList"
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /machines/{machine_id}:
    get:
      tags:
        - Machines
      summary: Get machine information/metadata by uuid
      description: Get machine information/metadata by uuid
      operationId: routes.machines.get_machine_info_by_id
      parameters:
        - name: machine_id
          in: path
          description: Machine UUID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /machines/bulk_get_availability:
    get:
      tags:
        - Machines
      summary: Get machine availability
      description: Get a machine's availability
      operationId: routes.machines.bulk_get_availability
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineAvailabilityList"
        401:
          description: Authorization error
          content: {}
      security:
        - jwt: []
  /machines/bulk_set_availability:
    put:
      tags:
        - Machines
      summary: Bulk update machine availability
      description: Update machine availability in bulk
      operationId: routes.machines.bulk_set_availability
      requestBody:
        description: List of machine id and availability
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MachineAvailabilityList"
        required: true
      responses:
        200:
          description: Set availability successful
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
  /machines/{machineId}/dispatch:
    post:
      tags:
        - Machines
      summary: Dispatch machine data
      description: Dispatch a machine's data to the backend services
      operationId: routes.machines.dispatch
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        202:
          description: Request accepted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/keyvalues:
    get:
      tags:
        - Machines
      summary: Get machine key-value pairs
      description: Get selected key-value pairs for a machine
      operationId: routes.machines.get_keyvalues
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeyValues"
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/keyvalues/{key}:
    delete:
      tags:
        - Machines
      summary: Delete machine key
      description: Delete a machine key
      operationId: routes.machines.del_key
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: key
          in: path
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            default: user
            enum:
              - user
              - data_stream
      responses:
        201:
          description: Deleted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
    post:
      tags:
        - Machines
      summary: Set machine key
      description: Set a machine key
      operationId: routes.machines.set_key
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: key
          in: path
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            default: reps
            enum:
              - reps
              - weight
              - available
              - user
              - avgCadence
              - avgSpeed
              - cadence
              - power
              - speed
              - distance
              - calories
              - rec
              - strokes
              - timestamp
              - pace
              - workoutTime
      requestBody:
        description: Value to set
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  oneOf:
                    - $ref: "#/components/schemas/DefaultString"
                    - type: number
              required:
                - value
              example:
                value: 0
        required: true
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/keyvalues/{key}/increment:
    post:
      tags:
        - Machines
      summary: Increment machine key
      description: Increment a machine key by 1 if request body is not specified, otherwise by the value specified in request body.
      operationId: routes.machines.increment_key
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: key
          in: path
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            default: reps
            enum:
              - reps
              - calories
              - distance
      requestBody:
        description: Value to increment
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: number
              required:
                - value
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
  /machines/{machineId}/keyvalues/{key}/xadd:
    post:
      tags:
        - Machines
      summary: Add data to machine data_stream
      description: Add a json data to data_stream key.
      operationId: routes.machines.xadd
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: key
          in: path
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            default: data_stream
            enum:
              - data_stream
      requestBody:
        description: JSON to add
        content:
          application/json:
            schema:
              type: object
      responses:
        201:
          description: Created
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []

  /machines/{machineId}/initializeStaticbikeWithUser:
    post:
      tags:
        - Machines
      summary: Initialize static bike machine with user
      description: Set user, recFlagFalse, speed, cadence, distance, workoutTime, calories, power, averageSpeed, averageCadenced and removes previous data stream.
      operationId: routes.machines.initialize_staticbike_with_user
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: User Id
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - value
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/initializeTreadmillWithUser:
    post:
      tags:
        - Machines
      summary: Initialize treadmill machine with user
      description: Set user, speed, distance, workoutTime, calories, averageSpeed and removes previous data stream.
      operationId: routes.machines.initialize_treadmill_with_user
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: User Id
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - value
              example:
                value: "123456"
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/initializeRowerWithUser:
    post:
      tags:
        - Machines
      summary: Initialize rower machine with user
      description: Set user, distance, cadence, calories, strokes, timestamp, workoutTime, pace, power and removes previous data stream.
      operationId: routes.machines.initialize_rower_with_user
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: User Id
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - value
              example:
                value: "123456"
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/initializeChestpressWithUser:
    post:
      tags:
        - Machines
      summary: Initialize weightstack machine with user
      description: Set user, reset reps, weight, calories and removes previous data stream.
      operationId: routes.machines.initialize_weightstack_with_user
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: User Id
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - value
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/chestPressUpdateRedis:
    post:
      tags:
        - Machines
      summary: Update reps, calories, weight and data_stream in updateRedis method in control3.py
      description: Set reps, calories, weight and data stream.
      operationId: routes.machines.weightStackUpdateRedis
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {calories, weight, d_diff}
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - calories
                - weight
                - d_diff
      responses:
        201:
          description: Updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/spinnerUpdateRedis:
    post:
      tags:
        - Machines
      summary: Update distance, workoutTime, calories, power, speed, avgSpeed, avgCadence, and data_stream in updateRedis method in update_redis_3.py
      description: Set rdistance, workoutTime, calories, power, speed, avgSpeed, avgCadence and data stream.
      operationId: routes.machines.spinnerUpdateRedis
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {calories, weight, d_diff}
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - distance
                - workoutTime
                - calories
                - power
                - speed
      responses:
        201:
          description: Updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /machines/{machineId}/spinnerUpdateRedisFromPostman:
    post:
      tags:
        - Machines
      summary: Update distance, workoutTime, calories, power, speed, avgSpeed, avgCadence, and data_stream in updateRedis method in update_redis_3.py
      description: Set rdistance, workoutTime, calories, power, speed, avgSpeed, avgCadence and data stream.
      operationId: routes.machines.spinnerUpdateRedisFromPostman
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {calories, weight, d_diff}
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - distance
                - workoutTime
                - calories
                - power
                - speed
                - avgSpeed
                - avgCadence
                - rec
      responses:
        201:
          description: Postman updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /machines/{machineId}/treadmillUpdateRedis:
    post:
      tags:
        - Machines
      summary: Update distance, workoutTime, calories, inclination, speed, avgSpeed, altitude, and data_stream in updateRedis method in update_redis_3.py
      description: Set distance, workoutTime, calories, inclination, speed, avgSpeed, altitude and data stream.
      operationId: routes.machines.treadmillUpdateRedis
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {calories, weight, d_diff}
        content:
          application/json:
            schema:
              type: object
              properties:
                distance:
                  type: number
                  format: float
                workoutTime:
                  type: number
                  format: float
                calories:
                  type: number
                  format: float
                inclination:
                  type: number
                  format: float
                speed:
                  type: number
                  format: float
                avgSpeed:
                  type: number
                  format: float
                altitude:
                  type: number
                  format: float
                met:
                  type: number
                  format: float
                rec:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - distance
                - workoutTime
                - calories
                - inclination
                - speed
                - avgSpeed
                - altitude
                - rec
              example:
                distance: 1.2
                workoutTime: 1.3
                calories: 1.4
                inclination: 12.3
                speed: 1.5
                avgSpeed: 1.6
                altitude: 12.4
                met: 1.7
                rec: "false"
      responses:
        201:
          description: Updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

/machines/{machineId}/rowerUpdateRedis:
    post:
      tags:
        - Machines
      summary: Update distance, cadence, calories, strokes, timestamp, workoutTime, pace, power, and data_stream in updateRedis method in update_redis_3.py
      description: Set distance, cadence, calories, strokes, timestamp, workoutTime, pace, power, and data_stream.
      operationId: routes.machines.rowerUpdateRedis
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {calories, weight, d_diff}
        content:
          application/json:
            schema:
              type: object
              properties:
                distance:
                  type: number
                  format: float
                cadence:
                  type: number
                  format: float
                calories:
                  type: number
                  format: float
                strokes:
                  type: number
                  format: float
                timestamp:
                  type: number
                  format: float
                workoutTime:
                  type: number
                  format: float
                pace:
                  type: number
                  format: float
                power:
                  type: number
                  format: float
                rec:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - distance
                - cadence
                - calories
                - strokes
                - timestamp
                - workoutTime
                - pace
                - power
                - rec
              example:
                distance: 1.2
                cadence: 1.3
                calories: 1.4
                strokes: 12.3
                timestamp: 1.5
                workoutTime: 1.6
                pace: 12.4
                power: 1.7
                rec: "false"
      responses:
        201:
          description: Updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /campaigns:
    get:
      tags:
        - Campaigns
      summary: GETs campaigns and filters based on query
      description: Retrieves a list of campaigns from the campaign collection based on query parameters
      operationId: routes.campaigns.get
      parameters:
        - name: active
          in: query
          description: whether campaign is currently active, false returns all inactive campaigns. If param is missing, returns all campaigns
          schema:
            type: boolean
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CampaignsList"
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
    post:
      tags:
        - Campaigns
      summary: Adds a new campaign
      description: Creates a new campaign
      operationId: routes.campaigns.post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Campaign"
      responses:
        201:
          description: Campaign created
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
      security:
        - ApiKeyAuth: []
        - jwt: []

  /campaigns/{campaignId}:
    get:
      tags:
        - Campaigns
      summary: Gets a campaign by its id
      description: Returns a campaign with matching campaign id
      operationId: routes.campaigns.get_campaign_by_id
      parameters:
        - name: campaignId
          in: path
          description: Campaign Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Campaign"
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
    delete:
      tags:
        - Campaigns
      summary: Deletes a campaign by its id
      description: Deletes a campaign with matching campaign id
      operationId: routes.campaigns.delete
      parameters:
        - name: campaignId
          in: path
          description: Campaign Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []

  /campaigns/usercampaignstatus:
    get:
      tags:
        - Campaigns
      summary: Gets a user's campaign status by user id and campaign id
      description: Gets a user's campaigns status in a particular campaign
      operationId: routes.campaigns.get_user_campaign_status
      parameters:
        - name: campaignId
          in: query
          description: Campaign Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: userId
          in: query
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCampaignStatusV2"
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
    post:
      tags:
        - Campaigns
      summary: Adds a new user campaign status
      description: Creates a new user campaign status
      operationId: routes.campaigns.post_user_campaign_status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCampaignStatusV2"
      responses:
        201:
          description: User Campaign Status created
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
      security:
        - ApiKeyAuth: []
        - jwt: []
    patch:
      tags:
        - Campaigns
      summary: Updates selected user campaign status information
      description: Updates campaign status tied to a particular user and campaign. Replaces corresponding field in record if provided.
      operationId: routes.campaigns.patch_user_campaign_status
      parameters:
        - name: campaignId
          in: query
          description: Campaign Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: userId
          in: query
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                campaign_status:
                  $ref: "#/components/schemas/CampaignStatus"
                user_claims:
                  $ref: "#/components/schemas/UserClaims"
      responses:
        204:
          description: successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /campaigns/users/{user_id}/calculate-status:
    put:
      tags:
        - Campaigns
      summary: Update specified user's campaign status for the latest/ongoing campaign of specified location
      description: Update specified user's campaign status for the latest/ongoing campaign of specified location
      operationId: routes.campaigns.calculateUserCampaignStatusV2
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: location
          in: query
          description: Gym location
          required: true
          schema:
            $ref: "#/components/schemas/Location"
        - name: selector
          in: query
          description: ongoing (default) or latest
          required: false
          schema:
            $ref: "#/components/schemas/EventSelector"

      responses:
        201:
          description: Calculation task dispatched.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /campaigns/{campaign_id}/users/{user_id}/calculate-status:
    put:
      tags:
        - Campaigns
      summary: Update specified user's campaign status for the specified campaign
      description: Update specified user's campaign status for the specified campaign
      operationId: routes.campaigns.calculateUserCampaignStatusV2ById
      parameters:
        - name: campaign_id
          in: path
          description: Campaign ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        201:
          description: Calculation task dispatched.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /campaigns/{campaign_id}/users/{user_id}/rewards/{reward_id}/claim:
    patch:
      tags:
        - Campaigns
      summary: Update claims field of the respective user's campaigns status, and decrements specified reward quantity
      description: Update claims field of the respective user's campaigns status, and decrements specified reward quantity
      operationId: routes.campaigns.claimReward
      parameters:
        - name: campaign_id
          in: path
          description: Campaign ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: reward_id
          in: path
          description: Reward ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                claim_rating:
                  type: integer
                  minimum: 0
                  maximum: 5
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /cumulative-challenges:
    get:
      tags:
        - Cumulative Challenges
      summary: get active/inactive (if specified) cumulative challenge based on location (if specified)
      description: get active/inactive (if specified) cumulative challenge based on location (if specified)
      operationId: routes.cumulativechallenges.cumulative_challenges.get_cumulative_challenges
      parameters:
        - name: location
          in: query
          description: Gym location (default=all)
          required: false
          schema:
            $ref: "#/components/schemas/Location"
        - name: active
          in: query
          description: whether cumulative-challenges is currently active, false returns all inactive cumulative-challenges. If param is missing, returns all cumulative-challenges
          schema:
            type: boolean
      responses:
        200:
          description: Succesful get cumulative_challenges list
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /cumulative-challenges/{cumulative_challenge_id}/users/{user_id}/status:
    get:
      tags:
        - Cumulative Challenges
      summary: get cumulative challenge status of specified user id and cumulative-challenge id
      description: get cumulative challenge status of specified user id and cumulative-challenge id
      operationId: routes.cumulativechallenges.cumulative_challenges.get_cumulative_challenges_status
      parameters:
        - name: cumulative_challenge_id
          in: path
          description: cumulative_challenge_id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"

      responses:
        200:
          description: Succesful get cumulative_challenges list
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /cumulative-challenges/users/{user_id}/calculate-status:
    put:
      tags:
        - Cumulative Challenges
      summary: Update specified user's cumulative challenge status for the latest/ongoing cumulative challenge of specified location
      description: Update specified user's cumulative challenge status for the latest/ongoing cumulative challenge of specified location
      operationId: routes.cumulativechallenges.cumulative_challenges.calculateUserCumulativeChallengeStatus
      parameters:
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: location
          in: query
          description: Gym location
          required: true
          schema:
            $ref: "#/components/schemas/Location"
        - name: selector
          in: query
          description: ongoing (default) or latest
          required: false
          schema:
            $ref: "#/components/schemas/EventSelector"

      responses:
        201:
          description: Calculation task dispatched.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /cumulative-challenges/{cumulative_challenge_id}/users/{user_id}/calculate-status:
    put:
      tags:
        - Cumulative Challenges
      summary: Update specified user's cumulative challenge status for the specified cumulative challenge
      description: Update specified user's cumulative challenge status for the specified cumulative challenge
      operationId: routes.cumulativechallenges.cumulative_challenges.calculateUserCumulativeChallengeStatusById
      parameters:
        - name: cumulative_challenge_id
          in: path
          description: Cumulative Challenge ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        201:
          description: Calculation task dispatched.
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /cumulative-challenges/{cumulative_challenge_id}/users/{user_id}/rewards/{reward_id}/claim:
    patch:
      tags:
        - Cumulative Challenges
      summary: Update claims field of the respective user's cumulative challenge status, and decrements specified reward quantity
      description: Update claims field of the respective user's cumulative challenge status, and decrements specified reward quantity
      operationId: routes.cumulativechallenges.cumulative_challenges.claimReward
      parameters:
        - name: cumulative_challenge_id
          in: path
          description: Cumulative Challenge ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: reward_id
          in: path
          description: Reward ID
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                claim_rating:
                  type: integer
                  minimum: 0
                  maximum: 5
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /rewards/random/reward-selections/{reward_selection_id}:
    get:
      tags:
        - Rewards
      summary: Gets a random reward from the list of rewards specified in the rewards table in postgres.
      description: Gets a random reward from the list of rewards specified in the rewards table in postgres.
      operationId: routes.rewards.rewards.getRandomReward
      parameters:
        - name: reward_selection_id
          in: path
          description: id of record in rewardselection collection in MongoDB
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  uuid:
                    $ref: "#/components/schemas/DefaultString"
                  reward_name:
                    $ref: "#/components/schemas/DefaultString"
                  location:
                    $ref: "#/components/schemas/DefaultString"
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /rewards/{reward_uuid}/claim:
    patch:
      tags:
        - Rewards
      summary: Decrements the quantity of the specified reward by 1 in the rewards table
      description: Decrements the quantity of the specified reward by 1 in the rewards table
      operationId: routes.rewards.rewards.claimRewardById
      parameters:
        - name: reward_uuid
          in: path
          description: id of reward in rewards table in Postgres
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        204:
          description: successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /registration:
    post:
      tags:
        - Access
      summary: Register new user
      description: Register a new user
      operationId: routes.access.registration
      requestBody:
        description: Username and password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationInfo"
        required: true
      responses:
        201:
          description: Registration created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        405:
          description: Invalid input
          content: {}
        409:
          description: Username conflict
          content: {}
        500:
          description: Unexpected error
          content: {}
  /registrationWithActiveSgQR:
    post:
      tags:
        - Access
      summary: Register new user
      description: Register a new user
      operationId: routes.access.registrationWithActiveSgQR
      requestBody:
        description: active SG ID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationActiveSgQRInfo"
        required: true
      responses:
        201:
          description: Registration created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        405:
          description: Invalid input
          content: {}
        409:
          description: Username conflict
          content: {}
        500:
          description: Unexpected error
          content: {}
  /tokens/refresh:
    post:
      tags:
        - Access
      summary: Request for a new token
      description: Request for a new token
      operationId: routes.access.refresh
      responses:
        202:
          description: Refresh accepted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        401:
          description: Authorization error
          content: {}
      security:
        - jwt: []
  /login:
    post:
      tags:
        - Access
      summary: Log in registered user
      description: Log in a registered user
      operationId: routes.access.login
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        401:
          description: Authorization error
          content: {}
      security:
        - BasicAuth: []
  /loginWithActiveSgId:
    post:
      tags:
        - Access
      summary: Log in registered user
      description: Log in a registered user
      deprecated: true
      operationId: routes.access.loginWithActiveSgId
      requestBody:
        description: Timestamp
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeStamp"
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        401:
          description: Authorization error
          content: {}
      security:
        - ActiveSgAuth: []

  /activesgids:
    post:
      tags:
        - Access
      summary: Create a new login token for ActiveSG ID
      description: Create a new login token for ActiveSG ID
      operationId: routes.access.post_activesgids
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ActiveSgId"
      responses:
        201:
          description: Token created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActiveSgIdToken"
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - ApiKeyAuth: []

  /wearable/hpbWatch/login:
    post:
      tags:
        - Access
      summary: Create a new login token for login with hpb watch
      description: Create a new login token for users who logged in using hpb watch
      operationId: routes.access.wearable_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WearableDetails"
      responses:
        201:
          description: Token created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActiveSgIdToken"
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}

  /activesgids/login:
    post:
      tags:
        - Access
      summary: Login using ActiveSG ID
      description: Login using ActiveSG ID
      operationId: routes.access.post_activesgids_login
      requestBody:
        description: Timestamp
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeStamp"
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthToken"
        401:
          description: Authorization error
          content: {}
      security:
        - ActiveSgIdToken: []

  /sms/requestOtp:
    post:
      tags:
        - Access
      summary: Request One Time Pin (OTP)
      description: Request SMS OTP
      operationId: routes.access.requestOtp
      requestBody:
        description: Phone number
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTPRequestBody"
      responses:
        "202":
          description: Accepted
          content: {}
        "400":
          description: Bad request
          content: {}
        "404":
          description: Not found
          content: {}
  /sms/loginWithOtp:
    post:
      tags:
        - Access
      summary: Log in using One Time Pin (OTP)
      description: Log in using SMS OTP
      operationId: routes.access.loginWithOtp
      requestBody:
        description: Phone number
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OTPLoginBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AntiCsrfToken"
        "204":
          description: No content
          content: {}
        "400":
          description: Bad request
          content: {}
        "401":
          description: Authorization error
          content: {}
        "404":
          description: Not found
          content: {}
      security:
        - OTPAuth: []
  /logout:
    post:
      tags:
        - Access
      summary: Log out registered user
      description: Log out a registered user
      operationId: routes.access.logout
      responses:
        202:
          description: Successful logout
          content: {}
        401:
          description: Authorization error
          content: {}
      security:
        - jwt: []
  /users/{userId}:
    get:
      tags:
        - Users
      summary: Get user information
      description: Get a user's information
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
    delete:
      tags:
        - Users
      summary: Delete user information fully
      description: Delete user information and all exercises tied to user
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDeletionInfo"
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
    patch:
      tags:
        - Users
      summary: Update selected user information
      description: Update user information tied to userId
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: option
          in: query
          description: Key
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
            enum:
              [
                user_display_name,
                user_gender,
                user_phone_no,
                password,
                username,
                user_height,
                user_weight,
                user_dob,
                user_claims,
                56km_challenge,
              ]
        - name: newValue
          in: query
          description: New value of changed variable
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserInfo"
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []
  /users/{userId}/updateclaims:
    post:
      deprecated: true
      tags:
        - Users
      summary: update user claims status for campaign
      description: input the feeback and date of claims
      operationId: routes.users.updateCampaignClaims
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: claims date and feedback
        content:
          application/json:
            schema:
              type: object
              properties:
                user_claim_date:
                  $ref: "#/components/schemas/DefaultString"
                user_feedback:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - user_claim_date
                - user_feedback
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /users/{userId}/claims:
    get:
      tags:
        - Users
      summary: Get user's exercise summaries
      description: Get status in a campaign for a user
      operationId: routes.users.calculateUserCampaignStatus
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCampaignStatus"
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /users/{userId}/exercises:
    get:
      tags:
        - Users
      summary: Get user's exercise summaries
      description: Get a list of all exercises belonging to a user
      operationId: routes.users.getUserExercises
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: location
          in: query
          description: Location
          required: false
          schema:
            $ref: "#/components/schemas/Location"
        - name: start_date
          in: query
          description: Start date of query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
        - name: end_date
          in: query
          description: End date of query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExerciseSummaries"
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /users/{userId}/exercises/{exerciseId}:
    get:
      tags:
        - Users
      summary: Get user's exercise detail
      description: Get details of one exercise belonging to a user
      operationId: routes.users.getUserExerciseDetail
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: exerciseId
          in: path
          description: Exercise Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExerciseDetail"
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []

  /users/{userId}/records:
    get:
      tags:
        - Users
      summary: Get user's personal best records
      description: Get details of a user's derived records (1RM values)
      operationId: routes.users.get_user_records
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: exercise_name
          in: query
          description: Exercise Name
          required: false
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []
        - ApiKeyAuth: []

  /feedback:
    post:
      tags:
        - Feedback
      summary: Post a new feedback for a specific location and machine
      description: Adds a new record to the feedback collection, creating the feedback collection if it does not already exist.
      operationId: routes.feedback.post_feedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Feedback"
      responses:
        201:
          description: New feedback posted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /feedbackv2:
    post:
      tags:
        - Feedback
      summary: Post a new feedback
      description: Adds a new record to the feedback collection, creating the feedback collection if it does not already exist.
      operationId: routes.feedback.post_feedbackv2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  $ref: "#/components/schemas/DefaultString"
                machineid:
                  $ref: "#/components/schemas/DefaultString"
                type:
                  $ref: "#/components/schemas/DefaultString"
                questions:
                  type: array
                  items:
                    $ref: "#/components/schemas/FeedbackQuestionAnswered"
                feedbackid:
                  $ref: "#/components/schemas/DefaultString"
                exerciseid:
                  type: array
                  items:
                    $ref: "#/components/schemas/DefaultString"
      responses:
        201:
          description: New feedback posted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}

  /feedback_question:
    post:
      tags:
        - Feedback
      summary: Post a new feedback
      description: Adds a new record to the feedback collection, creating the feedback collection if it does not already exist.
      operationId: routes.feedback.post_feedback_question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedbackForm"
      responses:
        201:
          description: New feedback posted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
    get:
      tags:
        - Feedback
      summary: Get feedback question base on feedback type
      description: Get the latest feedback question based on type
      operationId: routes.feedback.get_feedback_question
      parameters:
        - name: type
          in: query
          description: type
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}

  /exercises:
    post:
      tags:
        - Exercises
      summary: Post exercise
      description: Post exercise to database
      operationId: routes.exercises.exercises.post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExerciseDetail"
      responses:
        201:
          description: Exercise created
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
      security:
        - ApiKeyAuth: []

  /exercises/{exercise_name}/users/{user_id}/recommendation:
    get:
      tags:
        - Exercises
      summary: Get exercise recommendation for specific user and exercise name
      description: Get exercise recommendation for specific user and exercise name
      operationId: routes.exercises.exercises.get_recommendation
      parameters:
        - name: exercise_name
          in: path
          description: exercise_name
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: location
          in: query
          description: location
          required: false
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []

  /exercises/{userId}/records:
    get:
      tags:
        - Exercises
      summary: Users' exercise records for insights kiosk
      description: Provide exercise records
      operationId: routes.exercises.exercises.get_insights_records
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful
          content: {}
      security:
        - jwt: []

  /bodymetrics:
    post:
      tags:
        - BodyMetrics
      summary: Post bodymetrics
      description: Post bodyMetrics to database
      operationId: routes.exercises.exercises.post_bodymetrics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BodyMetrics"
      responses:
        201:
          description: Exercise created
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
      security:
        - ApiKeyAuth: []
  /machines/{machineId}/initializeBodyweightWithUser:
    post:
      tags:
        - Machines
      summary: Initialize Bodyweight machine with user
      description: For bodyweight
      operationId: routes.machines.initialize_bodyweight_with_user
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: User Id
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - value
      responses:
        201:
          description: Initialized machine with user
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []
  /machines/{machineId}/bodyweightUpdateRedis:
    post:
      tags:
        - Machines
      summary: bodyweight
      description: Set distance, workoutTime, is_ippt, exercise_group, exercise_name, timestamp, bodylandmarks
      operationId: routes.machines.bodyweightUpdateRedis
      parameters:
        - name: machineId
          in: path
          description: Machine Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        description: JSON values for the following {distance, workoutTime, is_ippt, exercise_group, exercise_name, timestamp, bodylandmarks}
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bodyweight"
      responses:
        201:
          description: Updated Redis with user exercise information
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /users/{userId}/wearables:
    get:
      tags:
        - Wearable
      summary: Get all of user's wearable details
      description: Get list of all user's wearable peripheral name & id from database
      operationId: routes.wearable.getAllWearableDetails
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []

  /users/{userId}/wearables/data:
    get:
      tags:
        - Wearable
      summary: Get all user wearable data
      description: Get daily hr, steps, mvpa and spo2 data
      operationId: routes.wearable.getAllWearableData
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: dataType
          in: query
          description: Data type (hr/ steps / spo2) to return
          required: false
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: startDate
          in: query
          description: Start date to query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
        - name: endDate
          in: query
          description: End date to query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []

  /users/{userId}/wearables/{wearableId}:
    get:
      tags:
        - Wearable
      summary: Get user's wearable details
      description: Get user's specified wearable peripheral name & id from database
      operationId: routes.wearable.getOneWearableDetails
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: wearableId
          in: path
          description: Wearable Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []
    delete:
      tags:
        - Wearable
      summary: Deletes wearable detail
      description: Deletes user's wearable detail with matching id
      operationId: routes.wearable.deleteWearableDetails
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: wearableId
          in: path
          description: Wearable Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []

  /wearables:
    post:
      tags:
        - Wearable
      summary: Update user's wearable details
      description: Update one wearable's peripheral name & id
      operationId: routes.wearable.updateWearableDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WearableDetails"
      responses:
        200:
          description: Wearable details updated
        201:
          description: Wearabled details added
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - ApiKeyAuth: []
        - jwt: []

  /wearable/{wearableModel}/authKey:
    get:
      tags:
        - Wearable
      summary: Get specific wearable authentication key
      description: Get wearable authentication key from docker secrets, takes in wearable model as look up key
      operationId: routes.wearable.getWearableAuthKey
      parameters:
        - name: wearableModel
          in: path
          description: Wearable Model
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []

  /users/{userId}/wearables/{wearableId}/data:
    get:
      tags:
        - Wearable
      summary: Get specific wearable data
      description: Get daily hr, steps, mvpa and spo2 data
      operationId: routes.wearable.getWearableData
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: wearableId
          in: path
          description: Wearable Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: dataType
          in: query
          description: Data type (hr/ steps / spo2) to return
          required: false
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: startDate
          in: query
          description: Start date to query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
        - name: endDate
          in: query
          description: End date to query
          required: false
          schema:
            $ref: "#/components/schemas/DateTime"
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []

    post:
      tags:
        - Wearable
      summary: Post user's wearable data
      description: Post wearable hr, mvpa, steps and spo2
      operationId: routes.wearable.updateWearableData
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
        - name: wearableId
          in: path
          description: Wearable Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WearableData"
      responses:
        200:
          description: Wearable data updated
        201:
          description: Wearabled details added
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - jwt: []

  /activehealthtrail/get_all_checkpoint_details:
    get:
      tags:
        - Active Health Trail
      summary: Get ALL checkpoint details
      description: Get checkpoint_id, neighbors
      operationId: routes.activehealthtrail.getAllCheckpointDetails
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - ApiKeyAuth: []

  /activehealthtrail/{checkpointId}:
    get:
      tags:
        - Active Health Trail
      summary: Get one checkpoint details
      description: Get a checkpoint's id and neighbors
      operationId: routes.activehealthtrail.getOneCheckpointDetails
      parameters:
        - name: checkpointId
          in: path
          description: Checkpoint Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []

  /activehealthtrail/update_checkpoint_details:
    post:
      tags:
        - Active Health Trail
      summary: Updates checkpoint details
      description: Updates checkpoint details based on checkpoint_id
      operationId: routes.activehealthtrail.updateCheckpointDetails
      requestBody:
        required: true
        description: Requires checkpoint_id and neighbors
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckpointDetails"
      responses:
        200:
          description: Checkpoint details updated
        201:
          description: Checkpoint details added
        401:
          description: Authorization error
          content: {}
        500:
          description: Unexpected error
          content: {}
      security:
        - jwt: []
        - ApiKeyAuth: []

  /users/{userId}/activehealthtrail/checkins:
    get:
      tags:
        - Active Health Trail
      summary: Get user checkins data
      description: Get userId, wearableId, checkinId, and timestamp data
      operationId: routes.activehealthtrail.getAhtCheckinDetails
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            $ref: "#/components/schemas/DefaultString"
      responses:
        200:
          description: Successful operation
          content: {}
        401:
          description: Authorization error
          content: {}
        404:
          description: Not found
          content: {}
      security:
        - jwt: []
        - ApiKeyAuth: []

  /activehealthtrail/update_checkin:
    post:
      tags:
        - Active Health Trail
      summary: Updates user checkins data
      description: Updates checkin data based on userId, wearableId and checkpointId
      operationId: routes.activehealthtrail.updateAhtCheckinData
      requestBody:
        required: true
        description: Requires wearable_id and checkpoint_id.
        content:
          application/json:
            schema:
              type: object
              properties:
                wearable_id:
                  $ref: "#/components/schemas/DefaultString"
                checkpoint_id:
                  $ref: "#/components/schemas/DefaultString"
              required:
                - wearable_id
                - checkpoint_id
      responses:
        201:
          description: Checkin data added
        401:
          description: Authorization error
          content: {}
        409:
          description: Conflict. Data already inside
        500:
          description: Unexpected error
          content: {}
      # security:
      #   - jwt: []
      #   - ApiKeyAuth: []

components:
  schemas:
    ActiveSgId:
      type: object
      properties:
        activesg_id:
          type: string
          pattern: "^[0-9]+$"
    ActiveSgIdToken:
      type: object
      properties:
        activesg_id_token:
          type: string
          pattern: "^[a-f0-9]{32}$"
    UserDisplayName:
      type: string
      pattern: "^[a-zA-Z0-9 ]{0,30}$"
    PasswordString:
      type: string
      pattern: '^[^<>\/\]\\{[} ]+$'
    DefaultString:
      type: string
      pattern: "^[a-zA-Z0-9._:@$ -]{0,256}$"
    Location:
      description: List of location names to be used (Edit this if there are new locations being supported)
      type: string
      enum:
        - ActiveSG@HBB
        - ActiveSG@JE
        - ActiveSG@OTH
        - 10MBCLevel9
        - X_10MBCLevel9
    LeaderboardMetrics:
      description: Supported leaderboard metrics.
      type: string
      enum:
        - active-minutes
        - calories-burnt
        - cardio-minutes
        - weight-lifted
        - gym-attendance
        - distance-run
    Health:
      description: Response to health check
      type: object
      properties:
        ok:
          description: Is server healthy?
          type: boolean
      example:
        ok: true
    KeyValues:
      description: Key value pairs of a machine
      type: object
      properties:
        w0:
          description: Weight of first weight stack in lbs
          type: integer
          minimum: 0
          maximum: 100
        wa:
          description: Add on weights on weight stack in lbs
          type: integer
          minimum: 0
          maximum: 100
        wn:
          description: Weight of subsequent weight stack in lbs
          type: integer
          minimum: 0
          maximum: 100
        user:
          $ref: "#/components/schemas/DefaultString"
        weight:
          description: Weight lifted in kg
          type: number
          minimum: 0
          maximum: 200
        available:
          type: boolean
        name:
          $ref: "#/components/schemas/DefaultString"
        location:
          $ref: "#/components/schemas/DefaultString"
        reps:
          type: integer
        type:
          $ref: "#/components/schemas/DefaultString"
    MachineIdList:
      description: A list of machine id
      type: array
      items:
        $ref: "#/components/schemas/MachineId"
    MachineId:
      description: A machine id
      type: object
      properties:
        uuid:
          $ref: "#/components/schemas/DefaultString"
        type:
          $ref: "#/components/schemas/DefaultString"
        exercise_name:
          $ref: "#/components/schemas/DefaultString"
        exercise_group:
          $ref: "#/components/schemas/DefaultString"
    UserCampaignStatus:
      description: A user campaign status
      type: object
      properties:
        status:
          type: integer
        claims:
          type: integer
    Feedback:
      description: A feedback tied to a specific location and machine
      type: object
      properties:
        machine_id:
          type: string
        location:
          type: string
        rating:
          type: number
        issue:
          type: string
    FeedbackForm:
      description: A feedback form
      type: object
      properties:
        location:
          $ref: "#/components/schemas/DefaultString"
        type:
          $ref: "#/components/schemas/DefaultString"
        questions:
          type: array
          items:
            $ref: "#/components/schemas/FeedbackQuestion"
    FeedbackQuestion:
      description: A feedback form question
      type: object
      properties:
        question:
          type: string
        type:
          type: string
        options:
          type: array
          items:
            $ref: "#/components/schemas/DefaultString"
    FeedbackQuestionAnswered:
      description: A answered feedback form question
      type: object
      properties:
        question:
          $ref: "#/components/schemas/DefaultString"
        type:
          $ref: "#/components/schemas/DefaultString"
        options:
          type: array
          items:
            $ref: "#/components/schemas/DefaultString"
        reply:
          $ref: "#/components/schemas/DefaultString"
    MachineAvailabilityList:
      description: A list of machine availability status
      type: array
      items:
        $ref: "#/components/schemas/MachineAvailability"
    MachineAvailability:
      description: A machine's availability status
      type: object
      properties:
        machineId:
          $ref: "#/components/schemas/DefaultString"
        availability:
          type: boolean
        location:
          $ref: "#/components/schemas/DefaultString"
        type:
          $ref: "#/components/schemas/DefaultString"
        muscleType:
          $ref: "#/components/schemas/DefaultString"
    ExerciseInfo:
      description: Basic information about exercise
      type: object
      required:
        - exercise_machine_id
      properties:
        exercise_name:
          $ref: "#/components/schemas/DefaultString"
        exercise_location:
          $ref: "#/components/schemas/DefaultString"
        exercise_id:
          $ref: "#/components/schemas/DefaultString"
        exercise_started:
          $ref: "#/components/schemas/DateTime"
        exercise_ended:
          $ref: "#/components/schemas/DateTime"
        exercise_type:
          $ref: "#/components/schemas/DefaultString"
        exercise_machine_id:
          $ref: "#/components/schemas/DefaultString"
    ExerciseSummary:
      allOf:
        - $ref: "#/components/schemas/UserInfo"
        - $ref: "#/components/schemas/ExerciseInfo"
        - description: One exercise, containing general data such as time, location and exercise summary.
          type: object
          properties:
            exercise_summary:
              type: object
    WeighingScaleData:
      description: Contains Data calculated by a smart weighing scale.
      type: object
    BpmData:
      description: Contains Data calculated by the bpm machine
      type: object
      required:
        - systolic
        - diastolic
        - arterial
        - pulse
        - timestamp
      properties:
        systolic:
          type: number
        diastolic:
          type: number
        arterial:
          type: number
        pulse:
          type: number
        timestamp:
          type: number

    ExerciseSummaries:
      description: A object containing a list of exercise summaries, usually from `GET`.
      type: array
      items:
        $ref: "#/components/schemas/ExerciseSummary"
    ExerciseDetail:
      allOf:
        - $ref: "#/components/schemas/ExerciseSummary"
        - description: One exercise, containing general data such as time and location, with exercise specific data stored in `exercise_data` field.
          type: object
          required:
            - exercise_data
          properties:
            exercise_data:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/Bike"
                  - $ref: "#/components/schemas/Weightstack"
                  - $ref: "#/components/schemas/Treadmill"
                  - $ref: "#/components/schemas/Bodyweight"
                  - $ref: "#/components/schemas/Rower"
    DateTime:
      description: Milliseconds since epoch
      type: integer
      format: int64
    Bike:
      description: Specific exercise data for bike.
      type: object
      required:
        - distance
        - timestamp
        - calories
        - speed
        - cadence
      properties:
        distance:
          type: number
        timestamp:
          type: number
        calories:
          type: number
        speed:
          type: number
        cadence:
          type: number
    Treadmill:
      description: Specific exercise data for Treadmill.
      type: object
      required:
        - distance
        - timestamp
        - altitude
        - calories
        - speed
        - avgSpeed
        - inclination
        - workoutTime
      properties:
        distance:
          type: number
        timestamp:
          type: number
        altitude:
          type: number
        calories:
          type: number
        speed:
          type: number
        avgSpeed:
          type: number
        inclination:
          type: number
        workoutTime:
          type: number
    Rower:
      description: Specific exercise data for Rower.
      type: object
      required:
        - distance
        - cadence
        - calories
        - strokes
        - timeStamp
        - workoutTime
        - pace
        - power
      properties:
        distance:
          type: number
        cadence:
          type: number
        calories:
          type: number
        strokes:
          type: number
        timeStamp:
          type: number
        workoutTime:
          type: number
        pace:
          type: number
        power:
          type: number
    Weightstack:
      description: Specific exercise data for weight stack.
      type: object
      required:
        - calories
        - weight
        - distance
        - timestamp
      properties:
        calories:
          type: number
        weight:
          type: number
        distance:
          type: number
        timestamp:
          type: number
    Bodyweight:
      description: Specific exercise data for bodyweight exercises
      type: object
      required:
        - exercise_name
        - exercise_group
        - timestamp
        - is_ippt
        - bodylandmarks
      properties:
        exercise_group:
          $ref: "#/components/schemas/DefaultString"
        exercise_name:
          $ref: "#/components/schemas/DefaultString"
        timestamp:
          type: number
        is_ippt:
          $ref: "#/components/schemas/DefaultString"
          enum: [NA, IPPT_True, IPPT_False]
        bodylandmarks:
          type: array
          items:
            $ref: "#/components/schemas/Bodylandmarks"
    Bodylandmarks:
      description: Timestamp and pose landmarks pair
      type: object
      required:
        - timestamp
        - landmarks
      properties:
        timestamp:
          type: number
        landmarks:
          type: array
          items:
            $ref: "#/components/schemas/LandmarkName"
    LandmarkName:
      description: Assigning the keypoint name with the xyz coordinates
      type: object
      required:
        - KeypointName
        - x
        - "y"
        - z
      properties:
        KeypointName:
          $ref: "#/components/schemas/DefaultString"
        x:
          type: number
        y:
          type: number
        z:
          type: number
    Gender:
      description: Gender
      $ref: "#/components/schemas/DefaultString"
      default: Female
      enum:
        - Female
        - Male
    RegistrationInfo:
      description: User information for registration.
      type: object
      required:
        - username
        - password
        - gender
        - phonenumber
        - displayname
      properties:
        username:
          $ref: "#/components/schemas/DefaultString"
        password:
          $ref: "#/components/schemas/PasswordString"
        gender:
          $ref: "#/components/schemas/Gender"
        phonenumber:
          $ref: "#/components/schemas/DefaultString"
        displayname:
          $ref: "#/components/schemas/UserDisplayName"
    TimeStamp:
      description: timestamp
      type: object
      required:
        - timestamp
      properties:
        timestamp:
          $ref: "#/components/schemas/DefaultString"
    RegistrationActiveSgQRInfo:
      description: User information for registration.
      type: object
      required:
        - activeSgId
        - phoneNo
        - location
        - device
        - machineUUID
      properties:
        activeSgId:
          $ref: "#/components/schemas/DefaultString"
        phoneNo:
          $ref: "#/components/schemas/DefaultString"
        location:
          $ref: "#/components/schemas/DefaultString"
        device:
          $ref: "#/components/schemas/DefaultString"
        machineUUID:
          $ref: "#/components/schemas/DefaultString"
    UserInfo:
      description: User information
      type: object
      required:
        - user_id
      properties:
        user_id:
          $ref: "#/components/schemas/DefaultString"
        user_display_name:
          $ref: "#/components/schemas/UserDisplayName"
        user_gender:
          $ref: "#/components/schemas/Gender"
        user_registered:
          $ref: "#/components/schemas/DateTime"
        user_phone_no:
          $ref: "#/components/schemas/DefaultString"
    UserDeletionInfo:
      description: User deletion information
      type: object
      properties:
        user_delete_count:
          type: integer
        exercises_delete_count:
          type: integer
    AuthToken:
      description: Authenication token.
      type: object
      properties:
        sessionKey:
          $ref: "#/components/schemas/DefaultString"
        refreshKey:
          $ref: "#/components/schemas/DefaultString"
        user_id:
          $ref: "#/components/schemas/DefaultString"
    AntiCsrfToken:
      description: Anti-CSRF token
      type: object
      properties:
        anti_csrf:
          $ref: "#/components/schemas/DefaultString"
        user_id:
          $ref: "#/components/schemas/DefaultString"
      example:
        anti_csrf: json.web.token
        user_id: test_user
    ServiceAccountCreate:
      description: Service account.
      required:
        - account_name
      type: object
      properties:
        account_name:
          $ref: "#/components/schemas/DefaultString"
    ServiceToken:
      description: API key for service account.
      type: object
      properties:
        apikey:
          $ref: "#/components/schemas/DefaultString"
        account:
          $ref: "#/components/schemas/DefaultString"
    Exercises:
      description: A list of exercises, usually from `GET`.
      type: array
      items:
        $ref: "#/components/schemas/Exercise"
    Exercise:
      description: One exercise, containing general data such as time and location, with exercise specific data stored in `exercise_data` field.
      type: object
      required:
        - user_nickname
      properties:
        user_nickname:
          $ref: "#/components/schemas/DefaultString"
        user_gender:
          $ref: "#/components/schemas/DefaultString"
        exercise_started:
          $ref: "#/components/schemas/DateTime"
        location:
          $ref: "#/components/schemas/DefaultString"
        exercise_type:
          $ref: "#/components/schemas/DefaultString"
        exercise_summary:
          type: object
        exercise_data:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/Bike"
              - $ref: "#/components/schemas/Weightstack"
              - $ref: "#/components/schemas/Bodyweight"
              - $ref: "#/components/schemas/Rower"
        calories:
          type: number
        last_modified:
          $ref: "#/components/schemas/DateTime"
      example:
        user_nickname: Test Dummy
        user_gender: Female
        location: 10MBCLevel9
        exercise_type: weightstack
        exercise_started: 1564102309634
        exercise_summary:
          reps: 2
          weight: 50
        exercise_data:
          - weight: 50
            distance: 295.0
            calories: 3.5
          - weight: 50
            distance: 280.0
            calories: 3.2
        calories: 6.7
    BodyMetrics:
      description: Contains Weighing-scale data as well as user and location information.
      type: object
      required:
        - user_nickname
      properties:
        user_id:
          $ref: "#/components/schemas/DefaultString"
        user_nickname:
          $ref: "#/components/schemas/DefaultString"
        user_gender:
          $ref: "#/components/schemas/DefaultString"
        machine_id:
          $ref: "#/components/schemas/DefaultString"
        date:
          $ref: "#/components/schemas/DateTime"
        location:
          $ref: "#/components/schemas/DefaultString"
        weighingscale_data:
          $ref: "#/components/schemas/WeighingScaleData"

    BodyMetricsList:
      description: Contains a list of BodyMetrics objects.
      type: array
      items:
        $ref: "#/components/schemas/BodyMetrics"

    BpMetrics:
      description: Contains Weighing-scale data as well as user and location information.
      type: object
      required:
        - user_nickname
      properties:
        user_id:
          $ref: "#/components/schemas/DefaultString"
        user_nickname:
          $ref: "#/components/schemas/DefaultString"
        user_gender:
          $ref: "#/components/schemas/DefaultString"
        machine_id:
          $ref: "#/components/schemas/DefaultString"
        date:
          $ref: "#/components/schemas/DateTime"
        location:
          $ref: "#/components/schemas/DefaultString"
        bpm_data:
          $ref: "#/components/schemas/BpmData"

    BpMetricsList:
      description: Contains a list of BpMetrics objects.
      type: array
      items:
        $ref: "#/components/schemas/BpMetrics"

    CampaignsList:
      description: A list of campaigns, usually from 'GET',
      type: array
      items:
        $ref: "#/components/schemas/Campaign"
    Campaign:
      description: Details of a single campaign. Contains information about a campaign like its start and end date and fulfilment requirements
      type: object
      required:
        - name
        - location
        - start_date
        - end_date
        - levels
      properties:
        name:
          $ref: "#/components/schemas/DefaultString"
        location:
          $ref: "#/components/schemas/DefaultString"
        start_date:
          $ref: "#/components/schemas/DateTime"
        end_date:
          $ref: "#/components/schemas/DateTime"
        levels:
          type: array
          items:
            $ref: "#/components/schemas/Level"
    Level:
      description: Details of a single level in a campaign
      type: object
      required:
        - duration_days
        - requirements
        - level_type
      properties:
        name:
          $ref: "#/components/schemas/DefaultString"
        duration_days:
          type: integer
        requirements:
          type: array
          items:
            $ref: "#/components/schemas/Exercise_requirement"
        level_type:
          $ref: "#/components/schemas/DefaultString"
          enum: [exercise, weighin, reward]
    Exercise_requirement:
      description: A single exercise requirement for use within a campaign level
      type: object
      properties:
        exercise_names:
          type: array
          items:
            $ref: "#/components/schemas/DefaultString"
        target:
          type: number
        units:
          $ref: "#/components/schemas/DefaultString"
    UserCampaignStatusV2:
      description: Details of a particular user's campaign status in a particular campaign
      type: object
      required:
        - user_id
        - campaign_id
      properties:
        user_id:
          $ref: "#/components/schemas/DefaultString"
        campaign_id:
          $ref: "#/components/schemas/DefaultString"
        campaign_status:
          $ref: "#/components/schemas/CampaignStatus"
        user_claims:
          $ref: "#/components/schemas/UserClaims"
    CampaignStatus:
      description: An array of campaign statuses
      type: array
      items:
        type: object
        properties:
          exercises:
            type: array
            items:
              $ref: "#/components/schemas/DefaultString"
          bodymetrics:
            type: array
            items:
              $ref: "#/components/schemas/DefaultString"
          date:
            $ref: "#/components/schemas/DateTime"
    UserClaims:
      description: An array of user claims
      type: array
      items:
        type: object
        properties:
          claim_date:
            $ref: "#/components/schemas/DateTime"
          claim_rating:
            $ref: "#/components/schemas/DefaultString"
    EventSelector:
      description: Selector for calculation of event status
      type: string
      default: ongoing
      enum:
        - ongoing
        - latest

    WearableDetails:
      description: User's paired wearable's peripheral id & name
      type: object
      required:
        - user_id
        - peripheral_id
        - peripheral_name
        - peripheral_model
      properties:
        user_id:
          $ref: "#/components/schemas/DefaultString"
        peripheral_id:
          $ref: "#/components/schemas/DefaultString"
        peripheral_name:
          $ref: "#/components/schemas/DefaultString"
        peripheral_model:
          $ref: "#/components/schemas/DefaultString"

    WearableData:
      description: user's daily hr, steps, mvpa data
      type: object
      required:
        - date
        - data_type
        - packets
      properties:
        date:
          $ref: "#/components/schemas/DateTime"
        data_type:
          $ref: "#/components/schemas/DefaultString"
        packets:
          type: array
          items:
            oneOf:
              - $ref: "#/components/schemas/HeartratePacket"
              - $ref: "#/components/schemas/StepsPacket"
              - $ref: "#/components/schemas/Spo2Packet"
    HeartratePacket:
      description: Heartrate data
      type: object
      required:
        - timestamp
        - heartrate
        - mvpa
      properties:
        timestamp:
          $ref: "#/components/schemas/DateTime"
        heartrate:
          type: number
        mvpa:
          type: number
    StepsPacket:
      description: steps data
      type: object
      required:
        - timestamp
        - steps
      properties:
        timestamp:
          $ref: "#/components/schemas/DateTime"
        steps:
          type: number
    Spo2Packet:
      description: spo2 data
      type: object
      required:
        - timestamp
        - spo2
      properties:
        timestamp:
          $ref: "#/components/schemas/DateTime"
        spo2:
          type: number
    LeaderList:
      description: List of name and score for leaderboard use
      type: array
      items:
        $ref: "#/components/schemas/NameScore"
    NameScore:
      description: A name and score for leaderboard use
      type: object
      properties:
        user_display_name:
          $ref: "#/components/schemas/UserDisplayName"
        user_id:
          $ref: "#/components/schemas/DefaultString"
        user_age:
          type: number
        user_gender:
          $ref: "#/components/schemas/DefaultString"
        score:
          type: number
    UserMetrics:
      description: Metrics of a user for leaderboard use.
      type: object
      properties:
        user_display_name:
          $ref: "#/components/schemas/UserDisplayName"
        distance-run:
          type: number
        weight-lifted:
          type: number
        active-minutes:
          type: number
        cardio-minutes:
          type: number
        calories-burnt:
          type: number
        gym-attendance:
          type: number

    Neighbors:
      description: Neighboring checkpoint(s)
      type: array
      items:
        type: object
        properties:
          checkpoint_id:
            $ref: "#/components/schemas/DefaultString"
          distance:
            type: number
            format: float

    CheckpointDetails:
      description: Checkpoint ID and its neighbors
      type: object
      required:
        - checkpoint_id
        - neighbors
      properties:
        checkpoint_id:
          $ref: "#/components/schemas/DefaultString"
        neighbors:
          $ref: "#/components/schemas/Neighbors"

    PhoneNumber:
      description: Phone number
      $ref: "#/components/schemas/DefaultString"
      example: "+6598765432"
    OTPRequestBody:
      description: Request body for OTP request
      type: object
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
    OTPLoginBody:
      description: Request body for OTP login
      type: object
      properties:
        phone_number:
          $ref: "#/components/schemas/PhoneNumber"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: routes.access.basic_auth
    OTPAuth:
      type: apiKey
      name: X-OTP
      in: header
      x-apikeyInfoFunc: routes.access.otp_auth
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
      x-apikeyInfoFunc: routes.access.api_key_auth
    ActiveSgAuth:
      type: apiKey
      name: activeSgId
      in: header
      x-apikeyInfoFunc: routes.access.active_sg_auth
    ActiveSgIdToken:
      type: apiKey
      name: X-ActiveSG-Id-Token
      in: header
      x-apikeyInfoFunc: routes.access.activesg_id_token
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: security.jwt.decode_token
